---
// Calendar Booking Component for Shallow Bay Advisors
interface Props {
  title?: string;
  subtitle?: string;
  buttonText?: string;
  propertyId?: string;
  propertyTitle?: string;
}

const {
  title = "Schedule a Consultation",
  subtitle = "Book a call with our commercial real estate experts",
  buttonText = "Book Appointment",
  propertyId,
  propertyTitle
} = Astro.props;

// Time slots will be dynamically loaded from CRM availability API
// This array is kept as fallback only
const fallbackTimeSlots = [
  "9:00 AM", "9:30 AM", "10:00 AM", "10:30 AM", "11:00 AM", "11:30 AM",
  "1:00 PM", "1:30 PM", "2:00 PM", "2:30 PM", "3:00 PM", "3:30 PM", "4:00 PM"
];

// Properties organized by county and sorted by size for easy navigation
const propertiesByCounty = {
  "Miami-Dade": [
    { id: "cold-storage-miami-beach", title: "Cold Storage Facility - Miami Beach, FL", size: "35,000 SF", sizeValue: 35000 },
    { id: "prime-warehouse-hialeah", title: "Prime Warehouse Space - Hialeah, FL", size: "45,000 SF", sizeValue: 45000 },
    { id: "modern-distribution-center-doral", title: "Modern Distribution Center - Doral, FL", size: "85,000 SF", sizeValue: 85000 },
    { id: "manufacturing-facility-miami", title: "Manufacturing Facility - Miami, FL", size: "120,000 SF", sizeValue: 120000 }
  ],
  "Broward": [
    { id: "flex-industrial-pompano", title: "Flex Industrial Space - Pompano Beach, FL", size: "25,000 SF", sizeValue: 25000 },
    { id: "port-access-dania-beach", title: "Port Access Facility - Dania Beach, FL", size: "60,000 SF", sizeValue: 60000 },
    { id: "distribution-warehouse-hollywood", title: "Distribution Warehouse - Hollywood, FL", size: "75,000 SF", sizeValue: 75000 },
    { id: "logistics-hub-ft-lauderdale", title: "Logistics Hub - Fort Lauderdale, FL", size: "95,000 SF", sizeValue: 95000 }
  ],
  "Palm Beach": [
    { id: "industrial-complex-boca", title: "Industrial Complex - Boca Raton, FL", size: "65,000 SF", sizeValue: 65000 },
    { id: "multi-use-west-palm", title: "Multi-Use Industrial - West Palm Beach, FL", size: "80,000 SF", sizeValue: 80000 },
    { id: "distribution-center-boynton", title: "Distribution Center - Boynton Beach, FL", size: "90,000 SF", sizeValue: 90000 },
    { id: "tech-manufacturing-delray", title: "Tech Manufacturing Hub - Delray Beach, FL", size: "110,000 SF", sizeValue: 110000 }
  ]
};
---

<div class="p-0">
  <!-- Header (only show if title exists) -->
  {title && (
    <div class="mb-8 text-center">
      <h3 class="text-2xl font-semibold text-sba-navy mb-3">
        {title}
      </h3>
      {subtitle && (
        <p class="text-gray-600 text-lg">
          {subtitle}
        </p>
      )}
    </div>
  )}

  <!-- Calendar Booking Form -->
  <form id="calendar-booking-form" class="space-y-6">
    <!-- Contact Information -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div>
        <label for="booking-name" class="block text-sm font-medium text-gray-700 mb-2">
          Full Name *
        </label>
        <input
          type="text"
          id="booking-name"
          name="name"
          required
          class="w-full px-3 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-sba-navy/20 focus:border-sba-navy bg-white text-sm transition-all duration-300"
          placeholder="Your name"
        />
      </div>
      <div>
        <label for="booking-email" class="block text-sm font-medium text-gray-700 mb-2">
          Email Address *
        </label>
        <input
          type="email"
          id="booking-email"
          name="email"
          required
          class="w-full px-3 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-sba-navy/20 focus:border-sba-navy bg-white text-sm transition-all duration-300"
          placeholder="your@email.com"
        />
      </div>
      <div>
        <label for="booking-phone" class="block text-sm font-medium text-gray-700 mb-2">
          Phone Number *
        </label>
        <input
          type="tel"
          id="booking-phone"
          name="phone"
          required
          class="w-full px-3 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-sba-navy/20 focus:border-sba-navy bg-white text-sm transition-all duration-300"
          placeholder="(555) 123-4567"
        />
      </div>
      <div>
        <label for="booking-company" class="block text-sm font-medium text-gray-700 mb-2">
          Company
        </label>
        <input
          type="text"
          id="booking-company"
          name="company"
          class="w-full px-3 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-sba-navy/20 focus:border-sba-navy bg-white text-sm transition-all duration-300"
          placeholder="Company name"
        />
      </div>
    </div>

    <!-- Appointment Details Row -->
    <div class="space-y-4">
      <!-- Property Selection (conditionally shown) -->
      {!propertyId ? (
        <div>
          <label for="property-selection" class="block text-sm font-medium text-gray-700 mb-2">
            Property to View *
          </label>
          <select
            id="property-selection"
            name="property_id"
            required
            class="w-full px-3 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-sba-navy/20 focus:border-sba-navy bg-white text-sm transition-all duration-300 appearance-none"
          >
            <option value="">Select a property to tour...</option>
            {Object.entries(propertiesByCounty).map(([county, properties]) => (
              <optgroup label={`${county} County`}>
                {properties.map(property => (
                  <option value={property.id}>
                    {property.title} ({property.size})
                  </option>
                ))}
              </optgroup>
            ))}
          </select>
        </div>
      ) : (
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">
            Property to View
          </label>
          <div class="w-full px-3 py-2 rounded-lg border border-gray-200 bg-gray-50 text-sm text-gray-900">
            üìç {propertyTitle}
          </div>
          <input type="hidden" name="property_id" value={propertyId} />
        </div>
      )}

      <!-- Date and Time Row -->
      <div class="grid grid-cols-2 gap-4">
        <!-- Date Selection -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">
            Preferred Date *
          </label>
          <div id="custom-calendar" class="border border-gray-300 rounded-lg p-4 bg-white">
            <div class="flex items-center justify-between mb-4">
              <button type="button" id="prev-month" class="p-1 hover:bg-gray-100 rounded">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                </svg>
              </button>
              <h3 id="calendar-month-year" class="text-lg font-semibold"></h3>
              <button type="button" id="next-month" class="p-1 hover:bg-gray-100 rounded">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                </svg>
              </button>
            </div>
            <div class="grid grid-cols-7 gap-1 mb-2">
              <div class="text-center text-xs font-medium text-gray-500 p-2">Sun</div>
              <div class="text-center text-xs font-medium text-gray-500 p-2">Mon</div>
              <div class="text-center text-xs font-medium text-gray-500 p-2">Tue</div>
              <div class="text-center text-xs font-medium text-gray-500 p-2">Wed</div>
              <div class="text-center text-xs font-medium text-gray-500 p-2">Thu</div>
              <div class="text-center text-xs font-medium text-gray-500 p-2">Fri</div>
              <div class="text-center text-xs font-medium text-gray-500 p-2">Sat</div>
            </div>
            <div id="calendar-dates" class="grid grid-cols-7 gap-1">
              <!-- Calendar dates will be populated here -->
            </div>
            <div class="mt-3 text-xs text-gray-500">
              <div class="flex items-center gap-4">
                <div class="flex items-center gap-1">
                  <div class="w-3 h-3 bg-green-100 border border-green-300 rounded"></div>
                  <span>Available</span>
                </div>
                <div class="flex items-center gap-1">
                  <div class="w-3 h-3 bg-gray-100 border border-gray-300 rounded"></div>
                  <span>Unavailable</span>
                </div>
              </div>
            </div>
          </div>
          <input type="hidden" id="appointment-date" name="appointment_date" required />
          <div id="selected-date-display" class="mt-2 text-sm text-gray-600"></div>
        </div>

        <!-- Time Selection -->
        <div>
          <label for="appointment-time" class="block text-sm font-medium text-gray-700 mb-2">
            Preferred Time *
          </label>
          <select
            id="appointment-time"
            name="appointment_time"
            required
            class="w-full px-3 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-sba-navy/20 focus:border-sba-navy bg-white text-sm transition-all duration-300"
          >
            <option value="">Select date first...</option>
            {fallbackTimeSlots.map(time => (
              <option value={time} class="fallback-option" style="display: none;">{time}</option>
            ))}
          </select>
        </div>
      </div>
    </div>

    <!-- Hidden Property Tracking (invisible to user) -->
    {propertyId && (
      <div>
        <input type="hidden" name="property_title" value={propertyTitle} />
        <input type="hidden" name="property_interest" value={`Property Interest - Regarding: ${propertyTitle}`} />
      </div>
    )}

    <!-- Message -->
    <div>
      <label for="booking-message" class="block text-sm font-medium text-gray-700 mb-2">
        Additional Details
      </label>
      <textarea
        id="booking-message"
        name="message"
        rows="3"
        class="w-full px-3 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-sba-navy/20 focus:border-sba-navy bg-white text-sm resize-none transition-all duration-300"
        placeholder="Tell us about your requirements..."
      ></textarea>
    </div>

    <!-- Submit Button -->
    <div class="pt-4">
      <button
        type="submit"
        id="booking-submit-btn"
        class="w-full px-6 py-3 bg-sba-navy text-white rounded-lg font-semibold hover:bg-sba-navy-dark focus:outline-none focus:ring-4 focus:ring-sba-navy/30 transition-all duration-300 disabled:opacity-50"
      >
        <span class="submit-text">{buttonText}</span>
        <span class="loading-text hidden">Booking Appointment...</span>
      </button>
    </div>

    <!-- Success Message -->
    <div id="booking-success" class="hidden bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-6 text-center">
      <div class="w-12 h-12 bg-green-100 dark:bg-green-900/40 rounded-full flex items-center justify-center mx-auto mb-4">
        <svg class="w-6 h-6 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
        </svg>
      </div>
      <h3 class="text-lg font-semibold text-green-900 dark:text-green-100 mb-2">Appointment Booked!</h3>
      <p class="text-green-700 dark:text-green-300">
        We've received your appointment request and will send you a confirmation email with all the details shortly.
      </p>
    </div>
  </form>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    const CRM_API_BASE = 'https://sbay-crm.netlify.app/api/public';
    let availableDates = new Set();
    let currentSelectedDate = null;
    let currentMonth = new Date().getMonth();
    let currentYear = new Date().getFullYear();
    let currentCalendarDate = new Date(currentYear, currentMonth, 1);

    // Cache to avoid repeated API calls
    let calendarCache = new Map(); // propertyId -> hasCalendar boolean
    let availabilityCache = new Map(); // propertyId-date -> hasAvailability boolean

    // Calendar elements
    const dateInput = document.getElementById('appointment-date');
    const timeSelect = document.getElementById('appointment-time');
    const propertySelect = document.getElementById('property-selection');
    const hiddenPropertyId = document.querySelector('input[name="property_id"]');
    const calendarDates = document.getElementById('calendar-dates');
    const calendarMonthYear = document.getElementById('calendar-month-year');
    const prevMonthBtn = document.getElementById('prev-month');
    const nextMonthBtn = document.getElementById('next-month');
    const selectedDateDisplay = document.getElementById('selected-date-display');

    // Get current property ID for availability checks
    function getCurrentPropertyId() {
      if (hiddenPropertyId && hiddenPropertyId.value) {
        return hiddenPropertyId.value;
      }
      if (propertySelect && propertySelect.value) {
        return propertySelect.value;
      }
      return null;
    }

    // Load available time slots for a specific date
    async function loadTimeSlots(propertyId, selectedDate) {
      if (!propertyId || !selectedDate) {
        timeSelect.innerHTML = '<option value="">Select property and date first...</option>';
        return;
      }

      timeSelect.innerHTML = '<option value="">Loading available times...</option>';
      timeSelect.disabled = true;

      try {
        const response = await fetch(`${CRM_API_BASE}/appointments/availability?propertyId=${propertyId}&date=${selectedDate}`);

        timeSelect.innerHTML = '<option value="">Select time...</option>';

        if (!response.ok) {
          const errorText = await response.text();
          console.error('Time slots API error:', response.status, errorText);

          // If no calendar configured, provide default business hours
          if (response.status === 404 || errorText.includes('Property not found or no calendar configured')) {
            console.log('No calendar configured, providing default business hours');
            const businessHours = [
              "9:00 AM", "9:30 AM", "10:00 AM", "10:30 AM", "11:00 AM", "11:30 AM",
              "1:00 PM", "1:30 PM", "2:00 PM", "2:30 PM", "3:00 PM", "3:30 PM", "4:00 PM"
            ];

            businessHours.forEach(time => {
              const option = document.createElement('option');
              option.value = time;
              option.textContent = time;
              timeSelect.appendChild(option);
            });
            timeSelect.disabled = false;
            return;
          }

          throw new Error(`HTTP ${response.status}`);
        }

        const data = await response.json();

        if (data.success && data.available_slots && data.available_slots.length > 0) {
          data.available_slots.forEach(slot => {
            const option = document.createElement('option');
            option.value = slot.display_time;
            option.textContent = slot.display_time;
            timeSelect.appendChild(option);
          });
          timeSelect.disabled = false;
        } else {
          timeSelect.innerHTML = '<option value="">No times available for this date</option>';
        }
      } catch (error) {
        console.error('Error loading time slots:', error);
        // Fallback to default business hours
        timeSelect.innerHTML = '<option value="">Select time...</option>';
        const businessHours = [
          "9:00 AM", "9:30 AM", "10:00 AM", "10:30 AM", "11:00 AM", "11:30 AM",
          "1:00 PM", "1:30 PM", "2:00 PM", "2:30 PM", "3:00 PM", "3:30 PM", "4:00 PM"
        ];

        businessHours.forEach(time => {
          const option = document.createElement('option');
          option.value = time;
          option.textContent = time;
          timeSelect.appendChild(option);
        });
        timeSelect.disabled = false;
      }
    }

    // Check if a date has any availability with caching
    async function checkDateAvailability(propertyId, date) {
      if (!propertyId) {
        return false;
      }

      // Check cache first
      const cacheKey = `${propertyId}-${date}`;
      if (availabilityCache.has(cacheKey)) {
        return availabilityCache.get(cacheKey);
      }

      try {
        const url = `${CRM_API_BASE}/appointments/availability?propertyId=${propertyId}&date=${date}`;

        const response = await fetch(url);

        if (!response.ok) {
          const errorText = await response.text();

          // If no calendar is configured, check if it's a business day
          if (response.status === 404 || errorText.includes('Property not found or no calendar configured')) {
            const checkDate = new Date(date);
            const dayOfWeek = checkDate.getDay();
            const isBusinessDay = dayOfWeek >= 1 && dayOfWeek <= 5;

            // Cache the result
            availabilityCache.set(cacheKey, isBusinessDay);
            return isBusinessDay;
          }

          // Cache negative result
          availabilityCache.set(cacheKey, false);
          return false;
        }

        const data = await response.json();
        const hasSlots = data.success && data.available_slots && data.available_slots.length > 0;

        // Cache the result
        availabilityCache.set(cacheKey, hasSlots);
        return hasSlots;
      } catch (error) {
        console.error(`Error checking availability for ${date}:`, error);

        // Fallback: business days, cache it
        const checkDate = new Date(date);
        const dayOfWeek = checkDate.getDay();
        const isBusinessDay = dayOfWeek >= 1 && dayOfWeek <= 5;

        availabilityCache.set(cacheKey, isBusinessDay);
        return isBusinessDay;
      }
    }

    // Pre-load availability - simplified for performance
    async function loadAvailableDates(propertyId) {
      if (!propertyId) {
        renderCalendar();
        return;
      }

      // Show loading state
      calendarDates.innerHTML = '<div class="col-span-7 text-center py-4 text-gray-500">Loading...</div>';

      availableDates.clear();

      // First check if this property has a calendar configured at all
      const hasCalendar = await checkPropertyHasCalendar(propertyId);

      if (!hasCalendar) {
        console.log(`No calendar configured for ${propertyId}, using business days fallback`);
        // Use business days as fallback (much faster)
        loadBusinessDaysForMonth(currentYear, currentMonth);
      } else {
        console.log(`Calendar found for ${propertyId}, loading specific availability`);
        // Load specific availability from CRM
        await loadMonthAvailability(propertyId, currentYear, currentMonth);
      }


      // Re-render the calendar
      renderCalendar();
    }

    // Check if property has calendar configuration (cached)
    async function checkPropertyHasCalendar(propertyId) {
      // Check cache first
      if (calendarCache.has(propertyId)) {
        return calendarCache.get(propertyId);
      }

      try {
        // Test with one date to see if calendar exists
        const testDate = new Date();
        testDate.setDate(testDate.getDate() + 1); // Tomorrow
        const dateStr = testDate.toISOString().split('T')[0];

        const response = await fetch(`${CRM_API_BASE}/appointments/availability?propertyId=${propertyId}&date=${dateStr}`);

        const hasCalendar = response.ok && response.status !== 404;

        // Cache the result
        calendarCache.set(propertyId, hasCalendar);

        return hasCalendar;
      } catch (error) {
        console.error('Error checking calendar existence:', error);
        calendarCache.set(propertyId, false);
        return false;
      }
    }

    // Load business days for a month (fallback when no calendar)
    function loadBusinessDaysForMonth(year, month) {
      const daysInMonth = new Date(year, month + 1, 0).getDate();
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      for (let day = 1; day <= daysInMonth; day++) {
        const checkDate = new Date(year, month, day);

        // Skip past dates
        if (checkDate < today) continue;

        const dayOfWeek = checkDate.getDay();
        // Tuesday only (2) as fallback to match calendar configuration
        if (dayOfWeek === 2) {
          const dateStr = checkDate.toISOString().split('T')[0];
          availableDates.add(dateStr);
        }
      }
    }

    // Load availability for specific month (when calendar exists)
    async function loadMonthAvailability(propertyId, year, month) {
      // Sample a few dates to determine pattern instead of checking every single day
      const sampleDates = getSampleDatesForMonth(year, month);

      console.log(`Checking availability pattern for ${propertyId} with sample dates:`, sampleDates);

      for (const dateStr of sampleDates) {
        const hasAvailability = await checkDateAvailability(propertyId, dateStr);
        if (hasAvailability) {
          availableDates.add(dateStr);

          // If we find availability on a day, check if there's a weekly pattern
          const date = new Date(dateStr);
          const dayOfWeek = date.getDay();

          // Add same day of week for the entire month
          addSameDayOfWeekForMonth(dayOfWeek, year, month);
        }
      }
    }

    // Get sample dates for a month (one date per day of week)
    function getSampleDatesForMonth(year, month) {
      const sampleDates = [];
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      // Get one sample date for each day of week
      for (let dayOfWeek = 0; dayOfWeek < 7; dayOfWeek++) {
        const firstOfMonth = new Date(year, month, 1);
        const firstDayOfWeek = firstOfMonth.getDay();

        let targetDay = 1 + (dayOfWeek - firstDayOfWeek + 7) % 7;
        if (targetDay < 1) targetDay += 7;

        const sampleDate = new Date(year, month, targetDay);

        // Skip if past or beyond month
        if (sampleDate >= today && sampleDate.getMonth() === month) {
          sampleDates.push(sampleDate.toISOString().split('T')[0]);
        }
      }

      return sampleDates;
    }

    // Add all instances of a specific day of week in a month
    function addSameDayOfWeekForMonth(dayOfWeek, year, month) {
      const daysInMonth = new Date(year, month + 1, 0).getDate();
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      for (let day = 1; day <= daysInMonth; day++) {
        const checkDate = new Date(year, month, day);

        if (checkDate >= today && checkDate.getDay() === dayOfWeek) {
          const dateStr = checkDate.toISOString().split('T')[0];
          availableDates.add(dateStr);
        }
      }
    }

    // Render the custom calendar
    function renderCalendar() {
      const firstDay = new Date(currentYear, currentMonth, 1);
      const lastDay = new Date(currentYear, currentMonth + 1, 0);
      const daysInMonth = lastDay.getDate();
      const startingDayOfWeek = firstDay.getDay();

      // Update month/year header
      const months = ['January', 'February', 'March', 'April', 'May', 'June',
                     'July', 'August', 'September', 'October', 'November', 'December'];
      calendarMonthYear.textContent = `${months[currentMonth]} ${currentYear}`;

      // Clear previous dates
      calendarDates.innerHTML = '';

      const today = new Date();
      today.setHours(0, 0, 0, 0);

      // Add empty cells for days before the first day of the month
      for (let i = 0; i < startingDayOfWeek; i++) {
        const emptyCell = document.createElement('div');
        emptyCell.className = 'p-2';
        calendarDates.appendChild(emptyCell);
      }

      // Add days of the month
      for (let day = 1; day <= daysInMonth; day++) {
        const dateCell = document.createElement('div');
        const currentDate = new Date(currentYear, currentMonth, day);
        const dateStr = currentDate.toISOString().split('T')[0];
        const isPast = currentDate < today;
        const isAvailable = availableDates.has(dateStr);
        const isSelected = currentSelectedDate === dateStr;

        dateCell.textContent = day;
        dateCell.className = 'p-2 text-center text-sm cursor-pointer rounded transition-all ';

        if (isPast) {
          // Past dates - disabled
          dateCell.className += 'text-gray-300 cursor-not-allowed';
        } else if (isAvailable) {
          // Available dates - green background
          dateCell.className += 'bg-green-100 text-green-800 border border-green-300 hover:bg-green-200';
          if (isSelected) {
            dateCell.className += ' ring-2 ring-green-500 bg-green-200';
          }
          dateCell.addEventListener('click', () => selectDate(dateStr));
        } else {
          // Unavailable dates - gray background, not clickable
          dateCell.className += 'bg-gray-100 text-gray-400 border border-gray-300 cursor-not-allowed';
        }

        calendarDates.appendChild(dateCell);
      }
    }

    // Select a date
    function selectDate(dateStr) {
      currentSelectedDate = dateStr;
      dateInput.value = dateStr;

      // Update display
      const displayDate = new Date(dateStr);
      selectedDateDisplay.textContent = `Selected: ${displayDate.toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      })}`;

      // Re-render calendar to show selection
      renderCalendar();

      // Load time slots for selected date
      const propertyId = getCurrentPropertyId();
      loadTimeSlots(propertyId, dateStr);
    }

    // Prevent multiple navigation clicks
    let isNavigating = false;

    // Calendar navigation
    prevMonthBtn.addEventListener('click', async function() {
      if (isNavigating) return;
      isNavigating = true;

      this.disabled = true;
      nextMonthBtn.disabled = true;

      if (currentMonth === 0) {
        currentMonth = 11;
        currentYear--;
      } else {
        currentMonth--;
      }
      currentCalendarDate = new Date(currentYear, currentMonth, 1);

      // Clear previous selection when changing months
      currentSelectedDate = null;
      selectedDateDisplay.textContent = '';

      const propertyId = getCurrentPropertyId();
      if (propertyId) {
        await loadAvailableDates(propertyId);
      } else {
        renderCalendar();
      }

      this.disabled = false;
      nextMonthBtn.disabled = false;
      isNavigating = false;
    });

    nextMonthBtn.addEventListener('click', async function() {
      if (isNavigating) return;
      isNavigating = true;

      this.disabled = true;
      prevMonthBtn.disabled = true;

      if (currentMonth === 11) {
        currentMonth = 0;
        currentYear++;
      } else {
        currentMonth++;
      }
      currentCalendarDate = new Date(currentYear, currentMonth, 1);

      // Clear previous selection when changing months
      currentSelectedDate = null;
      selectedDateDisplay.textContent = '';

      const propertyId = getCurrentPropertyId();
      if (propertyId) {
        await loadAvailableDates(propertyId);
      } else {
        renderCalendar();
      }

      this.disabled = false;
      prevMonthBtn.disabled = false;
      isNavigating = false;
    });

    // Handle property selection change
    if (propertySelect) {
      propertySelect.addEventListener('change', async function() {
        const propertyId = this.value;
        if (propertyId) {
          timeSelect.innerHTML = '<option value="">Loading availability...</option>';
          // Reset selection
          currentSelectedDate = null;
          selectedDateDisplay.textContent = '';
          await loadAvailableDates(propertyId);
        } else {
          timeSelect.innerHTML = '<option value="">Select property first...</option>';
          availableDates.clear();
          currentSelectedDate = null;
          selectedDateDisplay.textContent = '';
          renderCalendar();
        }
      });
    }

    // Initialize calendar and load availability
    async function initializeCalendar() {
      // Render initial empty calendar
      renderCalendar();

      // Load availability if property is already selected
      const propertyId = getCurrentPropertyId();
      if (propertyId) {
        await loadAvailableDates(propertyId);
      }
    }

    // Initialize for property-specific booking pages
    if (hiddenPropertyId && hiddenPropertyId.value) {
      initializeCalendar();
    } else {
      // For general booking pages, just render the empty calendar
      renderCalendar();
    }

    // Handle form submission
    const form = document.getElementById('calendar-booking-form');
    if (form) {
      form.addEventListener('submit', async function(e) {
        e.preventDefault();

        const submitBtn = document.getElementById('booking-submit-btn');
        const submitText = submitBtn.querySelector('.submit-text');
        const loadingText = submitBtn.querySelector('.loading-text');
        const successDiv = document.getElementById('booking-success');

        // Show loading state
        submitBtn.disabled = true;
        submitText.classList.add('hidden');
        loadingText.classList.remove('hidden');

        try {
          // Validate time slot selection
          if (!timeSelect.value || timeSelect.value === '' || timeSelect.innerHTML.includes('No times available')) {
            alert('Please select an available date and time slot for your appointment.');
            submitBtn.disabled = false;
            submitText.classList.remove('hidden');
            loadingText.classList.add('hidden');
            return;
          }

          // Collect form data
          const formData = new FormData(form);
          const data = Object.fromEntries(formData.entries());

          // Map data for CRM API
          const selectedProperty = document.getElementById('property-selection');
          const propertyId = getCurrentPropertyId();

          if (selectedProperty && selectedProperty.value) {
            const propertyTitle = selectedProperty.options[selectedProperty.selectedIndex].text;
            data.property_interest = propertyTitle;
            data.propertyId = propertyId;
          } else if (data.property_title) {
            // Property already selected (from property detail page)
            data.property_interest = `Property Interest - Regarding: ${data.property_title}`;
            data.propertyId = propertyId;
          }

          // Map date and time for appointment booking
          data.appointmentDate = data.appointment_date;
          data.appointmentTime = data.appointment_time;

          // Set appointment booking flags
          data.source = 'appointment_booking';
          data.appointment_type = 'consultation';

          // Submit to CRM appointment booking API (not leads API)
          const response = await fetch(`${CRM_API_BASE}/appointments`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
          });

          if (response.ok) {
            // Show success message
            form.classList.add('hidden');
            successDiv.classList.remove('hidden');

            // Scroll to success message
            successDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
          } else {
            throw new Error('Booking failed');
          }
        } catch (error) {
          console.error('Error booking appointment:', error);
          alert('There was an error booking your appointment. Please try again or call us directly at (954) 937-9667.');

          // Reset button state
          submitBtn.disabled = false;
          submitText.classList.remove('hidden');
          loadingText.classList.add('hidden');
        }
      });
    }
  });
</script>

<style>
  /* Select dropdown styling */
  select {
    appearance: none;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 12px center;
    background-repeat: no-repeat;
    background-size: 16px;
  }

  select:focus {
    outline: none;
  }

  /* Custom calendar styling */
  #custom-calendar {
    font-family: inherit;
  }

  #calendar-dates > div {
    min-height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 500;
  }

  #calendar-dates > div:hover:not(.cursor-not-allowed) {
    transform: scale(1.05);
  }

  /* Animation for date selection */
  #calendar-dates > div.ring-2 {
    animation: pulse-green 0.3s ease-in-out;
  }

  @keyframes pulse-green {
    0% { transform: scale(1); }
    50% { transform: scale(1.1); }
    100% { transform: scale(1); }
  }
</style>