---
// All Properties Page - Shows all available properties without limit
import Navigation from '../components/Navigation.astro';
import MobileAppHeader from '../components/MobileAppHeader.astro';
import Footer from '../components/Footer.astro';
import BaseLayout from '../layouts/BaseLayout.astro';

// Fetch all warehouse data from CRM API
let warehousesByCounty = {};
let allWarehouses = [];

try {
  const crmApiUrl = 'https://sbaycrm.netlify.app';
  console.log('Fetching all properties from CRM API:', `${crmApiUrl}/api/public/properties`);

  const response = await fetch(`${crmApiUrl}/api/public/properties`, {
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    }
  });

  if (response.ok) {
    const result = await response.json();
    const properties = result.properties || [];
    console.log(`Loaded ${properties.length} properties from CRM`);

    // Transform CRM properties to website format
    const transformedProperties = properties.map((property, index) => {
      // Parse size and ensure it's numeric
      const sizeValue = parseInt(property.size?.toString().replace(/[^\d]/g, '')) || 0;

      // Format size for display
      const displaySize = sizeValue > 0 ? `${sizeValue.toLocaleString()} SF` : property.size || 'N/A';

      // Format price correctly - avoid double dollar signs
      let formattedPrice = property.price || '0';
      if (!formattedPrice.toString().includes('$')) {
        formattedPrice = `$${formattedPrice}`;
      }
      // Ensure consistent format - if it doesn't have /SF/YR, add it
      if (!formattedPrice.includes('/') && !formattedPrice.toLowerCase().includes('year')) {
        formattedPrice = `${formattedPrice}/SF/YR`;
      }

      // Map property type to typeValue for filtering
      const typeMapping = {
        'warehouse': 'warehouse',
        'distribution': 'distribution',
        'manufacturing': 'manufacturing',
        'industrial': 'manufacturing',
        'office': 'office',
        'retail': 'retail'
      };

      return {
        id: property.id,
        title: property.title || `Property ${property.id}`,
        location: property.location || 'Location TBD',
        county: property.county || 'Unknown County',
        size: displaySize,
        sizeValue: sizeValue,
        price: formattedPrice,
        type: property.type || 'warehouse',
        typeValue: typeMapping[property.type?.toLowerCase()] || 'warehouse',
        available: property.available !== false,
        featured: property.featured || false,
        image: property.image || '/images/warehouse-placeholder.jpg',
        gallery: property.gallery || [],
        features: property.features || [],
        description: property.description || '',
        clearHeight: property.clear_height,
        loadingDocks: property.loading_docks || 0,
        parking: property.parking || 0,
        yearBuilt: property.year_built
      };
    });

    allWarehouses = transformedProperties;

    // Group by county for display
    transformedProperties.forEach(warehouse => {
      const county = warehouse.county;
      if (!warehousesByCounty[county]) {
        warehousesByCounty[county] = [];
      }
      warehousesByCounty[county].push(warehouse);
    });

  } else {
    console.error('Failed to fetch properties from CRM:', response.status, response.statusText);
  }
} catch (error) {
  console.error('Error fetching properties from CRM:', error);
}

const pageTitle = 'All Properties | sbay - Commercial Real Estate';
const pageDescription = 'Browse all available warehouse and industrial properties in South Florida';
---

<BaseLayout
  title={pageTitle}
  description={pageDescription}
  ogTitle={pageTitle}
  ogDescription={pageDescription}
>
  <Navigation />
  <MobileAppHeader />

  <main class="min-h-screen bg-gray-50">

    <!-- Hero Section -->
    <section class="bg-gradient-to-br from-sba-navy via-sba-navy-dark to-blue-900 text-white py-16">
      <div class="max-w-6xl mx-auto px-6">
        <div class="text-center">
          <h1 class="text-4xl lg:text-5xl font-bold mb-4">
            All Properties
          </h1>
          <p class="text-xl text-blue-100 mb-8">
            Browse our complete inventory of warehouse and industrial properties
          </p>
          <p class="text-lg text-blue-200">
            {allWarehouses.length} properties available
          </p>
        </div>
      </div>
    </section>

    <!-- Filter Section -->
    <section class="py-8 bg-white border-b border-gray-200">
      <div class="max-w-6xl mx-auto px-6">
        <div class="flex flex-wrap gap-4 items-center justify-center">
          <select id="countyFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-sba-navy focus:border-sba-navy">
            <option value="">All Counties</option>
            {Object.keys(warehousesByCounty).map(county => (
              <option value={county}>{county}</option>
            ))}
          </select>

          <select id="typeFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-sba-navy focus:border-sba-navy">
            <option value="">All Types</option>
            <option value="warehouse">Warehouse</option>
            <option value="distribution">Distribution</option>
            <option value="manufacturing">Manufacturing</option>
            <option value="office">Office</option>
            <option value="retail">Retail</option>
          </select>

          <button id="clearFilters" class="px-4 py-2 text-sba-navy border border-sba-navy rounded-lg hover:bg-sba-navy hover:text-white transition-colors">
            Clear Filters
          </button>
        </div>
      </div>
    </section>

    <!-- Properties Grid -->
    <section class="py-12">
      <div class="max-w-6xl mx-auto px-6">
        <div id="propertiesGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {allWarehouses.map((warehouse) => (
            <a
              href={`/property/${warehouse.id}`}
              class="property-card group bg-white rounded-xl overflow-hidden shadow-md hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2"
              data-county={warehouse.county}
              data-type={warehouse.typeValue}
            >
              <!-- Image -->
              <div class="aspect-[4/3] overflow-hidden relative">
                <img
                  src={warehouse.image}
                  alt={warehouse.title}
                  class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-300"
                  loading="lazy"
                />
                {warehouse.featured && (
                  <div class="absolute top-3 left-3 bg-sba-gold text-sba-navy px-2 py-1 rounded-full text-xs font-semibold">
                    Featured
                  </div>
                )}
                {warehouse.available && (
                  <div class="absolute top-3 right-3 bg-green-500 text-white px-2 py-1 rounded-full text-xs font-semibold">
                    Available
                  </div>
                )}
              </div>

              <!-- Content -->
              <div class="p-4">
                <div class="text-lg font-semibold text-gray-900 mb-2 line-clamp-2">
                  {warehouse.title}
                </div>

                <div class="text-sba-navy font-bold text-xl mb-2">
                  {warehouse.price}
                </div>

                <p class="text-gray-500 text-sm mb-2">
                  {warehouse.location}
                </p>

                <div class="text-sm text-gray-500 mb-3">
                  <div>{warehouse.size}</div>
                </div>

                <div class="flex items-center justify-between">
                  <span class="text-sm text-gray-500 capitalize">{warehouse.type}</span>
                  <span class="text-xs text-gray-400">{warehouse.county}</span>
                </div>
              </div>
            </a>
          ))}
        </div>

        <!-- No Results Message -->
        <div id="noResults" class="text-center py-12 hidden">
          <div class="text-gray-500 text-lg">
            No properties found matching your criteria.
          </div>
          <button onclick="clearAllFilters()" class="mt-4 px-6 py-2 bg-sba-navy text-white rounded-lg hover:bg-sba-navy-dark transition-colors">
            View All Properties
          </button>
        </div>
      </div>
    </section>

    <!-- Back to Home CTA -->
    <section class="py-16 bg-gray-50">
      <div class="max-w-4xl mx-auto px-6 text-center">
        <div class="flex flex-col gap-4 justify-center items-center max-w-md mx-auto">
          <a href="/" class="group w-full bg-sba-navy text-white px-8 py-4 rounded-lg font-semibold text-lg hover:bg-sba-navy-dark transition-all duration-300 shadow-lg hover:shadow-2xl hover:shadow-sba-navy/20 hover:scale-105 hover:-translate-y-1 text-center transform-gpu">
            ‚Üê Back to Home
          </a>

          <a href="/book-consultation" class="group w-full border-2 border-sba-navy text-sba-navy px-8 py-4 rounded-lg font-semibold text-lg hover:bg-sba-navy hover:text-white transition-all duration-300 hover:shadow-xl hover:shadow-sba-navy/10 hover:scale-105 hover:-translate-y-1 text-center transform-gpu">
            Book Property Showing
          </a>
        </div>
      </div>
    </section>

  </main>

  <Footer />
</BaseLayout>

<script>
  // Filter functionality
  function filterProperties() {
    const countyFilter = document.getElementById('countyFilter')?.value || '';
    const typeFilter = document.getElementById('typeFilter')?.value || '';
    const propertyCards = document.querySelectorAll('.property-card');
    const noResults = document.getElementById('noResults');
    let visibleCount = 0;

    propertyCards.forEach(card => {
      const cardCounty = card.getAttribute('data-county') || '';
      const cardType = card.getAttribute('data-type') || '';

      const matchesCounty = !countyFilter || cardCounty === countyFilter;
      const matchesType = !typeFilter || cardType === typeFilter;

      if (matchesCounty && matchesType) {
        card.style.display = 'block';
        visibleCount++;
      } else {
        card.style.display = 'none';
      }
    });

    // Show/hide no results message
    if (noResults) {
      if (visibleCount === 0) {
        noResults.classList.remove('hidden');
      } else {
        noResults.classList.add('hidden');
      }
    }
  }

  function clearAllFilters() {
    const countyFilter = document.getElementById('countyFilter');
    const typeFilter = document.getElementById('typeFilter');

    if (countyFilter) countyFilter.value = '';
    if (typeFilter) typeFilter.value = '';

    filterProperties();
  }

  // Add event listeners when page loads
  document.addEventListener('DOMContentLoaded', function() {
    const countyFilter = document.getElementById('countyFilter');
    const typeFilter = document.getElementById('typeFilter');
    const clearButton = document.getElementById('clearFilters');

    if (countyFilter) {
      countyFilter.addEventListener('change', filterProperties);
    }

    if (typeFilter) {
      typeFilter.addEventListener('change', filterProperties);
    }

    if (clearButton) {
      clearButton.addEventListener('click', clearAllFilters);
    }
  });

  // Make functions globally available
  window.clearAllFilters = clearAllFilters;
</script>

<style>
  select {
    appearance: none;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 12px center;
    background-repeat: no-repeat;
    background-size: 16px;
  }

  select:focus {
    outline: none;
  }

  .line-clamp-2 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
  }
</style>