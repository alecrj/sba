---
// Mobile-First Airbnb-Style Warehouse Showcase
import Navigation from '../components/Navigation.astro';
import MobileAppHeader from '../components/MobileAppHeader.astro';
import Footer from '../components/Footer.astro';
import BaseLayout from '../layouts/BaseLayout.astro';

// Fetch warehouse data from CRM API
let warehousesByCounty = {};
let allWarehouses = [];

try {
  const crmApiUrl = 'https://sbaycrm.netlify.app';
  console.log('Fetching properties from CRM API:', `${crmApiUrl}/api/public/properties`);

  const response = await fetch(`${crmApiUrl}/api/public/properties`, {
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    }
  });

  if (response.ok) {
    const result = await response.json();
    const properties = result.properties || [];
    console.log(`Loaded ${properties.length} properties from CRM`);

    // Transform CRM properties to website format
    const transformedProperties = properties.map((property, index) => {
      // Parse size and ensure it's numeric
      const sizeValue = parseInt(property.size?.toString().replace(/[^\d]/g, '')) || 0;

      // Format size for display
      const displaySize = sizeValue > 0 ? `${sizeValue.toLocaleString()} SF` : property.size || 'N/A';

      // Format price - clean up any existing formatting and just use the number
      let formattedPrice = property.price || '0';
      // Strip out any existing formatting ($/SF/YR etc)
      const priceNumber = formattedPrice.toString().replace(/[^\d.]/g, '');
      formattedPrice = `$${priceNumber}`;

      // Map property type to typeValue for filtering
      const typeMapping = {
        'warehouse': 'warehouse',
        'distribution': 'distribution',
        'manufacturing': 'manufacturing',
        'industrial': 'manufacturing',
        'flex': 'flex',
        'office': 'flex'
      };
      const typeValue = typeMapping[property.type?.toLowerCase()] || 'warehouse';

      // Use actual address for geocoding - we'll geocode on the frontend
      const fullAddress = `${property.street_address || ''}, ${property.city || ''}, ${property.state || 'FL'} ${property.zip_code || ''}`.trim();

      // For now, assign county-based coordinates but mark them for geocoding
      const countyCoords = {
        'Miami-Dade': { baseLat: 25.7617, baseLng: -80.1918 },
        'Broward': { baseLat: 26.1901, baseLng: -80.3659 },
        'Palm Beach': { baseLat: 26.7153, baseLng: -80.0533 },
        'St. Lucie': { baseLat: 27.2730, baseLng: -80.3582 }
      };

      const county = property.county || 'Miami-Dade';
      const coords = countyCoords[county] || countyCoords['Miami-Dade'];

      // Temporary coordinates - will be replaced by geocoding
      const tempLat = coords.baseLat;
      const tempLng = coords.baseLng;

      return {
        id: property.id,
        title: property.title,
        location: property.location,
        size: displaySize,
        sizeValue: sizeValue,
        price: formattedPrice,
        type: property.type,
        typeValue: typeValue,
        image: property.image || (property.gallery && property.gallery.length > 0 ? property.gallery[0] : "https://images.unsplash.com/photo-1586528116311-ad8dd3c8310d?w=800&h=600&fit=crop"),
        available: property.available,
        county: county,
        description: property.description,
        features: property.features || [],
        address: fullAddress,
        fullAddress: fullAddress, // For geocoding
        lat: tempLat,
        lng: tempLng,
        needsGeocoding: true, // Flag to indicate this needs geocoding
        created_at: property.created_at
      };
    });

    // Store all warehouses for expansion functionality
    allWarehouses = transformedProperties;

    // Group properties by county
    warehousesByCounty = transformedProperties.reduce((acc, property) => {
      const county = property.county;
      if (!acc[county]) {
        acc[county] = [];
      }
      acc[county].push(property);
      return acc;
    }, {});

  } else {
    console.log('Failed to fetch properties from CRM:', response.status, response.statusText);
  }
} catch (error) {
  console.log('Error fetching properties from CRM:', error);
}

// No fallback data - only show properties from CRM
---

<BaseLayout title="South Florida to Port St. Lucie Warehouses | Shallow Bay Advisors">
  <Navigation />
  <MobileAppHeader />

  <main class="min-h-screen bg-white">

    <!-- Airbnb-Style Mobile Header -->
    <section class="pt-16 md:pt-28 pb-4 md:pb-16">
      <div class="px-4 md:max-w-7xl md:mx-auto md:px-6 lg:px-8">

        <!-- Header - Responsive Design -->
        <div class="mb-12 text-center px-2">
          <h1 class="text-2xl min-[480px]:text-3xl sm:text-4xl md:text-5xl font-light text-gray-900 mb-6 font-['Poppins'] tracking-tight leading-tight px-4">
            Find your perfect warehouse
          </h1>
          <p class="text-sm min-[480px]:text-base sm:text-lg text-gray-600 max-w-2xl mx-auto px-4">
            Discover industrial properties from Miami-Dade to Port St. Lucie
          </p>
        </div>

        <!-- Desktop Search Bar -->
        <div class="hidden sm:flex justify-center mb-16">
          <div id="floating-search-bar" class="bg-white border border-gray-300 rounded-full shadow-lg hover:shadow-xl transition-all duration-200 p-1 max-w-4xl w-full">
            <div class="flex items-center">
              <div class="flex-1 px-4 py-4 border-r border-gray-300">
                <div class="text-xs font-semibold text-gray-700 mb-1">County</div>
                <select id="county-select" class="text-sm text-gray-800 w-full border-none outline-none bg-transparent appearance-none cursor-pointer">
                  <option value="">All counties</option>
                  <option value="Miami-Dade">Miami-Dade</option>
                  <option value="Broward">Broward</option>
                  <option value="Palm Beach">Palm Beach</option>
                  <option value="St. Lucie">St. Lucie</option>
                </select>
              </div>
              <div class="flex-1 px-4 py-4 border-r border-gray-300">
                <div class="text-xs font-semibold text-gray-700 mb-1">Size</div>
                <select id="size-select" class="text-sm text-gray-800 w-full border-none outline-none bg-transparent appearance-none cursor-pointer">
                  <option value="">Any size</option>
                  <option value="small">5K - 25K SF</option>
                  <option value="medium">25K - 100K SF</option>
                  <option value="large">100K+ SF</option>
                </select>
              </div>
              <div class="flex-1 px-4 py-4 border-r border-gray-300">
                <div class="text-xs font-semibold text-gray-700 mb-1">Type</div>
                <select id="type-select" class="text-sm text-gray-800 w-full border-none outline-none bg-transparent appearance-none cursor-pointer">
                  <option value="">All types</option>
                  <option value="warehouse">Warehouse</option>
                  <option value="distribution">Distribution</option>
                  <option value="manufacturing">Manufacturing</option>
                  <option value="flex">Flex Space</option>
                </select>
              </div>
              <div class="flex-1 px-4 py-4 border-r border-gray-300">
                <div class="text-xs font-semibold text-gray-700 mb-1">Sort by</div>
                <select id="sort-select" class="text-sm text-gray-800 w-full border-none outline-none bg-transparent appearance-none cursor-pointer">
                  <option value="">Default</option>
                  <option value="price-low">Price: Low to High</option>
                  <option value="price-high">Price: High to Low</option>
                  <option value="size-small">Size: Small to Large</option>
                  <option value="size-large">Size: Large to Small</option>
                  <option value="newest">Newest First</option>
                </select>
              </div>
              <div class="px-4 py-4 flex items-center">
                <button
                  id="clear-filters-btn"
                  onclick="clearFilters()"
                  class="text-xs text-gray-600 hover:text-sba-navy font-medium border border-gray-300 rounded-md px-3 py-2 hover:border-sba-navy transition-colors"
                >
                  Clear
                </button>
              </div>
            </div>
          </div>
        </div>

      </div>
    </section>

    <!-- Airbnb-Style Mobile Properties -->
    <section class="pb-20">
      <div class="px-4 md:max-w-7xl md:mx-auto md:px-6">

        <!-- Section Header - Mobile First -->
        <div class="mb-4 md:mb-8">
          <h2 class="text-lg md:text-2xl font-semibold text-gray-900 mb-1">
            Explore warehouses
          </h2>
          <p class="text-gray-500 text-sm md:text-base">
            Find your perfect space from Miami-Dade to Port St. Lucie
          </p>
        </div>

        <!-- Mobile Filter Bar - Compact Single Row -->
        <div class="sm:hidden mb-6">
          <div id="mobile-search-bar" class="bg-white border border-gray-200 rounded-xl shadow-md hover:shadow-lg transition-all duration-200 mx-4 overflow-hidden">

            <!-- All Filters in One Row -->
            <div class="flex">
              <!-- County -->
              <div class="flex-1 px-2 py-3 border-r border-gray-100">
                <div class="text-xs font-semibold text-gray-700 mb-1">County</div>
                <select id="mobile-county-select" class="text-xs text-gray-800 w-full border-none outline-none bg-transparent appearance-none cursor-pointer">
                  <option value="">All counties</option>
                  <option value="Miami-Dade">Miami-Dade</option>
                  <option value="Broward">Broward</option>
                  <option value="Palm Beach">Palm Beach</option>
                  <option value="St. Lucie">St. Lucie</option>
                </select>
              </div>
              <!-- Size -->
              <div class="flex-1 px-2 py-3 border-r border-gray-100">
                <div class="text-xs font-semibold text-gray-700 mb-1">Size</div>
                <select id="mobile-size-select" class="text-xs text-gray-800 w-full border-none outline-none bg-transparent appearance-none cursor-pointer">
                  <option value="">Any size</option>
                  <option value="small">5K - 25K SF</option>
                  <option value="medium">25K - 100K SF</option>
                  <option value="large">100K+ SF</option>
                </select>
              </div>
              <!-- Type -->
              <div class="flex-1 px-2 py-3 border-r border-gray-100">
                <div class="text-xs font-semibold text-gray-700 mb-1">Type</div>
                <select id="mobile-type-select" class="text-xs text-gray-800 w-full border-none outline-none bg-transparent appearance-none cursor-pointer">
                  <option value="">All types</option>
                  <option value="warehouse">Warehouse</option>
                  <option value="distribution">Distribution</option>
                  <option value="manufacturing">Manufacturing</option>
                  <option value="flex">Flex Space</option>
                </select>
              </div>
              <!-- Sort -->
              <div class="flex-1 px-2 py-3 border-r border-gray-100">
                <div class="text-xs font-semibold text-gray-700 mb-1">Sort</div>
                <select id="mobile-sort-select" class="text-xs text-gray-800 w-full border-none outline-none bg-transparent appearance-none cursor-pointer">
                  <option value="">Default</option>
                  <option value="price-low">Price: Low to High</option>
                  <option value="price-high">Price: High to Low</option>
                  <option value="size-small">Size: Small to Large</option>
                  <option value="size-large">Size: Large to Small</option>
                  <option value="newest">Newest First</option>
                </select>
              </div>
              <!-- Clear -->
              <div class="px-2 py-3 flex items-center">
                <button
                  id="mobile-clear-filters-btn"
                  onclick="clearFilters()"
                  class="text-xs text-gray-600 hover:text-sba-navy font-medium border border-gray-300 rounded-md px-2 py-1 hover:border-sba-navy transition-colors"
                >
                  Clear
                </button>
              </div>
            </div>

          </div>
        </div>

        <!-- Mobile: Airbnb-style horizontal scroll with 2.1 cards visible -->
        <!-- Desktop: Responsive Grid -->
        <div class="sm:hidden">
          <div class="flex gap-3 overflow-x-auto pb-4 scrollbar-hide px-4" style="scroll-snap-type: x mandatory; margin-right: -1rem;">
            {Object.entries(warehousesByCounty).flatMap(([county, warehouses]) =>
              warehouses.slice(0, 12).map((warehouse, index) => (
                <a href={`/property/${warehouse.id}`} class="block group flex-none" style="scroll-snap-align: start; width: calc((100vw - 2rem - 1rem) / 2.1);">

                  <!-- Clean Property Card -->
                  <div class="bg-white rounded-xl overflow-hidden">

                    <!-- Property Image - Optimized aspect ratio -->
                    <div class="relative overflow-hidden rounded-xl" style="aspect-ratio: 1.15/1;">
                      <img
                        src={warehouse.image}
                        alt={warehouse.title}
                        class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                      />
                    </div>

                    <!-- Compact Content -->
                    <div class="pt-3">
                      <!-- Title - Full width to prevent cutoff -->
                      <h3 class="font-medium text-gray-900 text-sm leading-snug mb-1 line-clamp-2">
                        {warehouse.title}
                      </h3>

                      <!-- Location -->
                      <p class="text-gray-500 text-sm mb-1 truncate">
                        {warehouse.location}
                      </p>

                      <!-- Size and Type - Single line with separator -->
                      <div class="text-sm text-gray-500 mb-1">
                        <span class="truncate">{warehouse.size} • {warehouse.type}</span>
                      </div>

                      <!-- Price -->
                      <div class="text-sm font-semibold text-gray-900">
                        {warehouse.price}<span class="font-normal"> SF/Year</span>
                        {warehouse.available && (
                          <span class="text-green-600 font-medium ml-2">Available</span>
                        )}
                      </div>

                    </div>

                  </div>

                </a>
              ))
            )}
          </div>
        </div>

        <!-- Desktop Grid: 4→5 cards per row -->
        <div class="hidden sm:grid sm:grid-cols-4 sm:gap-3 lg:grid-cols-5 lg:gap-4 xl:gap-6">
          {Object.entries(warehousesByCounty).flatMap(([county, warehouses]) =>
            warehouses.slice(0, 12).map((warehouse) => (
              <a href={`/property/${warehouse.id}`} class="block group">

                <!-- Clean Property Card -->
                <div class="bg-white rounded-xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">

                  <!-- Property Image - Optimized aspect ratio -->
                  <div class="relative overflow-hidden rounded-t-xl" style="aspect-ratio: 1.15/1;">
                    <img
                      src={warehouse.image}
                      alt={warehouse.title}
                      class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                    />
                  </div>

                  <!-- Title Box - Flush with image -->
                  <div class="bg-gradient-to-r from-sba-navy via-slate-800 to-sba-navy-dark text-white px-4 py-3 h-16 flex items-center justify-center shadow-sm">
                    <h3 class="font-bold text-sm leading-snug line-clamp-2 text-center tracking-wide font-['Poppins']">
                      {warehouse.title}
                    </h3>
                  </div>

                  <!-- Desktop Content -->
                  <div class="p-4 min-h-[100px] flex flex-col rounded-b-xl bg-gradient-to-b from-white to-gray-50 border-t border-gray-100">

                    <!-- Price -->
                    <div class="text-base font-semibold text-gray-900 mb-2">
                      {warehouse.price}<span class="font-normal text-sm"> SF/Year</span>
                    </div>

                    <!-- Location - Allow more space -->
                    <p class="text-gray-500 text-sm mb-2">
                      {warehouse.location}
                    </p>

                    <!-- Size - Remove clamp -->
                    <div class="text-sm text-gray-500 mb-2">
                      <div>{warehouse.size}</div>
                    </div>

                    <!-- Type and Availability -->
                    <div class="flex items-center justify-between mt-auto">
                      <span class="text-sm text-gray-500">{warehouse.type}</span>
                      {warehouse.available && (
                        <span class="text-green-600 font-medium text-xs">Available</span>
                      )}
                    </div>

                  </div>

                </div>

              </a>
            ))
          )}
        </div>

        <!-- Additional Properties (Hidden Initially) -->
        <div id="additionalProperties" class="hidden">
          <!-- Mobile: Additional properties -->
          <div class="sm:hidden mt-6">
            <div class="flex gap-3 overflow-x-auto pb-4 scrollbar-hide px-4" style="scroll-snap-type: x mandatory; margin-right: -1rem;" id="additionalMobileGrid">
              <!-- Will be populated by JavaScript -->
            </div>
          </div>

          <!-- Desktop: Additional properties -->
          <div class="hidden sm:grid sm:grid-cols-4 sm:gap-3 lg:grid-cols-5 lg:gap-4 xl:gap-6 mt-6" id="additionalDesktopGrid">
            <!-- Will be populated by JavaScript -->
          </div>
        </div>

        <!-- View All Properties Button -->
        <div class="text-center mt-8">
          <button id="viewAllBtn" class="inline-flex items-center justify-center bg-sba-navy text-white px-8 py-3 rounded-lg font-semibold text-lg hover:bg-sba-navy-dark transition-all duration-300 shadow-lg hover:shadow-xl hover:scale-105 transform-gpu">
            <span id="btnText">View All Properties</span>
            <svg id="btnIcon" class="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
            </svg>
          </button>
        </div>

        <!-- Interactive Map Section -->
        <div id="homepage-map-container" class="bg-white rounded-xl shadow-lg overflow-hidden mt-12">
          <div class="p-4 border-b border-gray-200">
            <h3 class="text-lg font-semibold text-gray-900 mb-2">Property Locations</h3>
            <p class="text-sm text-gray-600">Click on any marker to view property details</p>
          </div>

          <div class="h-96 md:h-[500px] relative">
            <div id="homepage-properties-map" class="w-full h-full">
              <!-- Leaflet map will be initialized here -->
            </div>
          </div>

          <!-- Selected Property Card -->
          <div id="homepage-map-property-cards" class="border-t border-gray-200 bg-gray-50 min-h-16">
            <div class="p-4 text-sm text-gray-500 text-center">
              Click on a property marker above to view details
            </div>
          </div>
        </div>

      </div>
    </section>

    <!-- Simple CTA Buttons -->
    <section class="py-16 bg-gray-50">
      <div class="max-w-4xl mx-auto px-6 text-center">
        <div class="flex flex-col gap-4 justify-center items-center max-w-md mx-auto">
          <a href="/book-consultation" class="group w-full bg-sba-navy text-white px-8 py-4 rounded-lg font-semibold text-lg hover:bg-sba-navy-dark transition-all duration-300 shadow-lg hover:shadow-2xl hover:shadow-sba-navy/20 hover:scale-105 hover:-translate-y-1 text-center transform-gpu">
            Book Showing
          </a>

          <a href="/contact" class="group w-full border-2 border-sba-navy text-sba-navy px-8 py-4 rounded-lg font-semibold text-lg hover:bg-sba-navy hover:text-white transition-all duration-300 hover:shadow-xl hover:shadow-sba-navy/10 hover:scale-105 hover:-translate-y-1 text-center transform-gpu">
            Can't find what you're looking for? Let us know what you need
          </a>
        </div>
      </div>
    </section>

  </main>

  <Footer />
</BaseLayout>

<style>
  /* Clean minimal styling */
  select {
    appearance: none;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 12px center;
    background-repeat: no-repeat;
    background-size: 16px;
  }

  select:focus,
  input:focus {
    outline: none;
  }

  html {
    scroll-behavior: smooth;
  }

  /* Text truncation utilities */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Airbnb-style horizontal scroll */
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }

  /* Mobile property cards - Airbnb style */
  @media (max-width: 640px) {
    .property-container {
      padding-right: calc(10% + 1rem);
    }
  }

  /* Mobile app-style adjustments */
  @media (max-width: 768px) {
    .container {
      padding-left: 1rem;
      padding-right: 1rem;
    }
  }

  select:focus-visible,
  button:focus-visible,
  a:focus-visible {
    outline: 2px solid #1f2937;
    outline-offset: 2px;
  }
</style>

<script define:vars={{ warehousesByCounty, allWarehouses }}>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 Filter system initializing...');
    console.log('DEBUG: Script is running!');

    // View All Properties functionality
    let showingAll = false;
    const viewAllBtn = document.getElementById('viewAllBtn');
    const btnText = document.getElementById('btnText');
    const btnIcon = document.getElementById('btnIcon');
    const additionalProperties = document.getElementById('additionalProperties');
    const additionalMobileGrid = document.getElementById('additionalMobileGrid');
    const additionalDesktopGrid = document.getElementById('additionalDesktopGrid');

    if (viewAllBtn) {
      viewAllBtn.addEventListener('click', function() {
        if (!showingAll) {
          // Show all properties
          const additionalWarehouses = allWarehouses.slice(12); // Skip first 12

          // Render additional mobile properties
          if (additionalMobileGrid && additionalWarehouses.length > 0) {
            additionalMobileGrid.innerHTML = additionalWarehouses.map(warehouse => {
              return `
                <a href="/property/${warehouse.id}" class="block group flex-none" style="scroll-snap-align: start; width: calc((100vw - 2rem - 1rem) / 2.1);">
                  <div class="bg-white rounded-xl overflow-hidden">
                    <div class="aspect-[4/3] overflow-hidden relative">
                      <img src="${warehouse.image}" alt="${warehouse.title}" class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-300" loading="lazy" />
                      ${warehouse.featured ? '<div class="absolute top-2 left-2 bg-sba-gold text-sba-navy px-2 py-1 rounded-full text-xs font-semibold">Featured</div>' : ''}
                      ${warehouse.available ? '<div class="absolute top-2 right-2 bg-green-500 text-white px-2 py-1 rounded-full text-xs font-semibold">Available</div>' : ''}
                    </div>
                    <div class="p-3">
                      <div class="text-base font-semibold text-gray-900 mb-1 line-clamp-2">${warehouse.title}</div>
                      <div class="text-sba-navy font-bold text-lg mb-1">${warehouse.price}<span class="font-normal text-sm">/SF</span></div>
                      <p class="text-gray-500 text-xs mb-1">${warehouse.location}</p>
                      <div class="text-xs text-gray-500 mb-2">${warehouse.size}</div>
                      <div class="flex items-center justify-between">
                        <span class="text-xs text-gray-500">${warehouse.type}</span>
                        ${warehouse.available ? '<span class="text-green-600 font-medium text-xs">Available</span>' : ''}
                      </div>
                    </div>
                  </div>
                </a>
              `;
            }).join('');
          }

          // Render additional desktop properties
          if (additionalDesktopGrid && additionalWarehouses.length > 0) {
            additionalDesktopGrid.innerHTML = additionalWarehouses.map(warehouse => {
              return `
                <a href="/property/${warehouse.id}" class="block group">
                  <div class="bg-white rounded-xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
                    <div class="aspect-[4/3] overflow-hidden relative">
                      <img src="${warehouse.image}" alt="${warehouse.title}" class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-300" loading="lazy" />
                      ${warehouse.featured ? '<div class="absolute top-3 left-3 bg-sba-gold text-sba-navy px-2 py-1 rounded-full text-xs font-semibold">Featured</div>' : ''}
                      ${warehouse.available ? '<div class="absolute top-3 right-3 bg-green-500 text-white px-2 py-1 rounded-full text-xs font-semibold">Available</div>' : ''}
                    </div>
                    <div class="p-4 min-h-[100px] flex flex-col rounded-b-xl bg-gradient-to-b from-white to-gray-50 border-t border-gray-100">
                      <div class="text-base font-semibold text-gray-900 mb-2">${warehouse.price}<span class="font-normal text-sm">/SF</span></div>
                      <p class="text-gray-500 text-sm mb-2">${warehouse.location}</p>
                      <div class="text-sm text-gray-500 mb-2">${warehouse.size}</div>
                      <div class="flex items-center justify-between mt-auto">
                        <span class="text-sm text-gray-500">${warehouse.type}</span>
                        ${warehouse.available ? '<span class="text-green-600 font-medium text-xs">Available</span>' : ''}
                      </div>
                    </div>
                  </div>
                </a>
              `;
            }).join('');
          }

          additionalProperties.classList.remove('hidden');
          btnText.textContent = 'Show Less';
          btnIcon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16l4-4m0 0l4 4m-4-4v12"/>'; // Up arrow
          showingAll = true;
        } else {
          // Hide additional properties
          additionalProperties.classList.add('hidden');
          btnText.textContent = 'View All Properties';
          btnIcon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>'; // Right arrow
          showingAll = false;
        }
      });
    }
    const floatingSearchBar = document.getElementById('floating-search-bar');
    const mobileSearchBar = document.getElementById('mobile-search-bar');
    const countySelect = document.getElementById('county-select');
    const sizeSelect = document.getElementById('size-select');
    const typeSelect = document.getElementById('type-select');
    const sortSelect = document.getElementById('sort-select');

    // Mobile selectors
    const mobileCountySelect = document.getElementById('mobile-county-select');
    const mobileSizeSelect = document.getElementById('mobile-size-select');
    const mobileTypeSelect = document.getElementById('mobile-type-select');
    const mobileSortSelect = document.getElementById('mobile-sort-select');
    const mobileContainer = document.querySelector('.sm\\:hidden .flex.gap-3');
    const desktopGrid = document.querySelector('.hidden.sm\\:grid');

    // Use the server-side fetched data for client-side filtering
    const warehouseData = warehousesByCounty;
    console.log('💾 Warehouse data loaded:', warehouseData);
    console.log('💾 Available counties:', Object.keys(warehouseData));

    // Search bar shrinking behavior on scroll
    let lastScrollY = window.scrollY;
    let isCompact = false;

    function updateSearchBarOnScroll() {
      const currentScrollY = window.scrollY;

      if (floatingSearchBar) {
        if (currentScrollY > 200 && !isCompact) {
          // Shrink search bar
          floatingSearchBar.style.transform = 'scale(0.8)';
          floatingSearchBar.style.maxWidth = '700px';
          isCompact = true;
        } else if (currentScrollY <= 200 && isCompact) {
          // Expand search bar back to normal
          floatingSearchBar.style.transform = 'scale(1)';
          floatingSearchBar.style.maxWidth = '1280px';
          isCompact = false;
        }
      }

      lastScrollY = currentScrollY;
    }

    // Throttle scroll events for performance
    let ticking = false;
    window.addEventListener('scroll', function() {
      if (!ticking) {
        requestAnimationFrame(updateSearchBarOnScroll);
        ticking = true;
        setTimeout(() => { ticking = false; }, 10);
      }
    });

    // Filter properties based on search criteria
    function filterProperties() {
      const county = (countySelect ? countySelect.value : '') || (mobileCountySelect ? mobileCountySelect.value : '');
      const size = (sizeSelect ? sizeSelect.value : '') || (mobileSizeSelect ? mobileSizeSelect.value : '');
      const type = (typeSelect ? typeSelect.value : '') || (mobileTypeSelect ? mobileTypeSelect.value : '');
      const sort = (sortSelect ? sortSelect.value : '') || (mobileSortSelect ? mobileSortSelect.value : '');

      console.log('Filter values - County:', county, 'Size:', size, 'Type:', type, 'Sort:', sort);
      console.log('Available warehouse data keys:', Object.keys(warehouseData));

      let filteredProperties = [];

      // Get all properties or filter by county
      if (county && county !== '') {
        filteredProperties = warehouseData[county] || [];
        console.log('Filtering by county:', county, 'Found properties:', filteredProperties.length);
      } else {
        // Get all properties from all counties
        filteredProperties = Object.values(warehouseData).flat();
        console.log('Showing all properties:', filteredProperties.length);
      }

      // Filter by size
      if (size && size !== '') {
        const beforeSizeFilter = filteredProperties.length;
        filteredProperties = filteredProperties.filter(property => {
          console.log('Property sizeValue:', property.sizeValue, 'Size filter:', size);
          switch (size) {
            case 'small':
              return property.sizeValue >= 5000 && property.sizeValue <= 25000;
            case 'medium':
              return property.sizeValue > 25000 && property.sizeValue <= 100000;
            case 'large':
              return property.sizeValue > 100000;
            default:
              return true;
          }
        });
        console.log('Size filter reduced properties from', beforeSizeFilter, 'to', filteredProperties.length);
      }

      // Filter by type
      if (type && type !== '') {
        const beforeTypeFilter = filteredProperties.length;
        filteredProperties = filteredProperties.filter(property => {
          console.log('Property typeValue:', property.typeValue, 'Type filter:', type);
          return property.typeValue === type;
        });
        console.log('Type filter reduced properties from', beforeTypeFilter, 'to', filteredProperties.length);
      }

      // Sort properties
      if (sort && sort !== '') {
        console.log('Sorting properties by:', sort);
        switch (sort) {
          case 'price-low':
            filteredProperties.sort((a, b) => {
              const priceA = parseFloat(a.price.replace(/[^\d.]/g, '')) || 0;
              const priceB = parseFloat(b.price.replace(/[^\d.]/g, '')) || 0;
              console.log('Price sorting low to high:', a.title, a.price, '→', priceA, 'vs', b.title, b.price, '→', priceB);
              return priceA - priceB;
            });
            break;
          case 'price-high':
            filteredProperties.sort((a, b) => {
              const priceA = parseFloat(a.price.replace(/[^\d.]/g, '')) || 0;
              const priceB = parseFloat(b.price.replace(/[^\d.]/g, '')) || 0;
              console.log('Price sorting high to low:', a.title, a.price, '→', priceA, 'vs', b.title, b.price, '→', priceB);
              return priceB - priceA;
            });
            break;
          case 'size-small':
            filteredProperties.sort((a, b) => a.sizeValue - b.sizeValue);
            break;
          case 'size-large':
            filteredProperties.sort((a, b) => b.sizeValue - a.sizeValue);
            break;
          case 'newest':
            // Sort by creation date if available, otherwise by id
            filteredProperties.sort((a, b) => {
              if (a.created_at && b.created_at) {
                return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();
              }
              return b.id.localeCompare(a.id);
            });
            break;
          default:
            // Default sort - keep original order
            break;
        }
        console.log('Properties sorted by:', sort);
      }

      console.log('Final filtered properties:', filteredProperties.length);
      return filteredProperties;
    }

    // Render filtered properties
    function renderProperties(properties) {
      console.log('Rendering properties:', properties.length, 'properties found');

      if (properties.length === 0) {
        const noResultsHTML = `
          <div class="col-span-full text-center py-12">
            <div class="text-gray-500 text-lg">
              No properties found matching your criteria.
            </div>
            <button onclick="clearFilters()" class="mt-4 text-sba-navy hover:text-sba-navy-dark font-medium">
              Clear filters
            </button>
          </div>
        `;

        if (mobileContainer) mobileContainer.innerHTML = noResultsHTML;
        if (desktopGrid) desktopGrid.innerHTML = noResultsHTML;
        return;
      }

      // Mobile horizontal scroll layout
      const mobileHTML = properties.map(warehouse => `
        <a href="/property/${warehouse.id}" class="block group flex-none" style="scroll-snap-align: start; width: calc((100vw - 2rem - 1rem) / 2.1);">
          <div class="bg-white rounded-xl overflow-hidden">
            <div class="relative overflow-hidden rounded-xl" style="aspect-ratio: 1.15/1;">
              <img
                src="${warehouse.image}"
                alt="${warehouse.title}"
                class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
              />
            </div>
            <div class="pt-3">
              <h3 class="font-medium text-gray-900 text-sm leading-snug mb-1 line-clamp-2">
                ${warehouse.title}
              </h3>
              <p class="text-gray-500 text-sm mb-1 truncate">
                ${warehouse.location}
              </p>
              <div class="text-sm text-gray-500 mb-1">
                <span class="truncate">${warehouse.size} • ${warehouse.type}</span>
              </div>
              <div class="text-sm font-semibold text-gray-900">
                ${warehouse.price}<span class="font-normal"> SF/Year</span>
                ${warehouse.available ? '<span class="text-green-600 font-medium ml-2">Available</span>' : ''}
              </div>
            </div>
          </div>
        </a>
      `).join('');

      // Desktop grid layout
      const desktopHTML = properties.map(warehouse => `
        <a href="/property/${warehouse.id}" class="block group">
          <div class="bg-white rounded-xl overflow-hidden">
            <div class="relative overflow-hidden rounded-xl" style="aspect-ratio: 1.15/1;">
              <img
                src="${warehouse.image}"
                alt="${warehouse.title}"
                class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
              />
            </div>
            <div class="pt-2">
              <h3 class="font-medium text-gray-900 text-xs leading-snug mb-1 line-clamp-2">
                ${warehouse.title}
              </h3>
              <div class="text-sm font-semibold text-gray-900 mb-1">
                ${warehouse.price}<span class="font-normal"> SF/Year</span>
              </div>
              <p class="text-gray-500 text-xs mb-1 truncate">
                ${warehouse.location}
              </p>
              <div class="text-xs text-gray-500 space-y-1">
                <div class="flex items-center">
                  <span class="truncate">${warehouse.size}</span>
                </div>
                <div class="flex items-center justify-between">
                  <span class="truncate">${warehouse.type}</span>
                  ${warehouse.available ? '<span class="text-green-600 font-medium whitespace-nowrap">Available</span>' : ''}
                </div>
              </div>
            </div>
          </div>
        </a>
      `).join('');

      if (mobileContainer) mobileContainer.innerHTML = mobileHTML;
      if (desktopGrid) desktopGrid.innerHTML = desktopHTML;

      // Always update homepage map with current properties
      // Small delay to ensure the map container is visible before initializing
      setTimeout(async () => {
        await renderHomepageMapView(properties);
        // Invalidate size to ensure proper map rendering
        if (homepageMap) {
          homepageMap.invalidateSize();
        }
      }, 100);

      // Reset property card area
      if (homepageMapPropertyCards) {
        homepageMapPropertyCards.innerHTML = `
          <div class="p-4 text-sm text-gray-500 text-center">
            Click on a property marker above to view details
          </div>
        `;
      }
    }

    // Clear filters function (make it global so button can access it)
    window.clearFilters = function() {
      if (countySelect) countySelect.value = '';
      if (sizeSelect) sizeSelect.value = '';
      if (typeSelect) typeSelect.value = '';
      if (sortSelect) sortSelect.value = '';
      if (mobileCountySelect) mobileCountySelect.value = '';
      if (mobileSizeSelect) mobileSizeSelect.value = '';
      if (mobileTypeSelect) mobileTypeSelect.value = '';
      if (mobileSortSelect) mobileSortSelect.value = '';
      renderProperties(Object.values(warehouseData).flat());
    };

    // Live filtering - no search button needed
    async function performLiveFilter() {
      const filteredProperties = filterProperties();
      console.log('Performing live filter, found properties:', filteredProperties.length);
      renderProperties(filteredProperties);
      await renderHomepageMapView(filteredProperties);
    }

    // Add live filtering to all select elements
    if (countySelect) {
      console.log('County select found, adding listener');
      countySelect.addEventListener('change', function() {
        console.log('County changed to:', countySelect.value);
        performLiveFilter();
      });
    } else {
      console.log('County select not found');
    }

    if (sizeSelect) {
      console.log('Size select found, adding listener');
      sizeSelect.addEventListener('change', function() {
        console.log('Size changed to:', sizeSelect.value);
        performLiveFilter();
      });
    } else {
      console.log('Size select not found');
    }

    if (typeSelect) {
      console.log('Type select found, adding listener');
      typeSelect.addEventListener('change', function() {
        console.log('Type changed to:', typeSelect.value);
        performLiveFilter();
      });
    } else {
      console.log('Type select not found');
    }

    if (sortSelect) {
      console.log('Sort select found, adding listener');
      sortSelect.addEventListener('change', function() {
        console.log('Sort changed to:', sortSelect.value);
        performLiveFilter();
      });
    } else {
      console.log('Sort select not found');
    }

    // Mobile filter event listeners
    if (mobileCountySelect) {
      mobileCountySelect.addEventListener('change', function() {
        console.log('Mobile county changed to:', mobileCountySelect.value);
        performLiveFilter();
      });
    }

    if (mobileSizeSelect) {
      mobileSizeSelect.addEventListener('change', function() {
        console.log('Mobile size changed to:', mobileSizeSelect.value);
        performLiveFilter();
      });
    }

    if (mobileTypeSelect) {
      mobileTypeSelect.addEventListener('change', function() {
        console.log('Mobile type changed to:', mobileTypeSelect.value);
        performLiveFilter();
      });
    }

    if (mobileSortSelect) {
      mobileSortSelect.addEventListener('change', function() {
        console.log('Mobile sort changed to:', mobileSortSelect.value);
        performLiveFilter();
      });
    }


    // Enhanced search bar interactions
    if (floatingSearchBar) {
      // Add focus states
      const inputs = floatingSearchBar.querySelectorAll('input, select');
      inputs.forEach(input => {
        input.addEventListener('focus', function() {
          floatingSearchBar.classList.add('shadow-2xl');
          floatingSearchBar.classList.remove('shadow-lg');
        });

        input.addEventListener('blur', function() {
          // Delay to allow for clicking search button
          setTimeout(() => {
            if (!floatingSearchBar.contains(document.activeElement)) {
              floatingSearchBar.classList.remove('shadow-2xl');
              floatingSearchBar.classList.add('shadow-lg');
            }
          }, 100);
        });
      });
    }

    // Enhanced mobile search bar interactions
    if (mobileSearchBar) {
      // Add focus states
      const mobileInputs = mobileSearchBar.querySelectorAll('input, select');
      mobileInputs.forEach(input => {
        input.addEventListener('focus', function() {
          mobileSearchBar.classList.add('shadow-2xl');
          mobileSearchBar.classList.remove('shadow-lg');
        });

        input.addEventListener('blur', function() {
          // Delay to allow for clicking search button
          setTimeout(() => {
            if (!mobileSearchBar.contains(document.activeElement)) {
              mobileSearchBar.classList.remove('shadow-2xl');
              mobileSearchBar.classList.add('shadow-lg');
            }
          }, 100);
        });
      });
    }

    // Homepage Map Functionality
    let homepageMap = null;
    let homepageMarkersLayer = null;
    const homepageMapContainer = document.getElementById('homepage-map-container');
    const homepagePropertiesMap = document.getElementById('homepage-properties-map');
    const homepageMapPropertyCards = document.getElementById('homepage-map-property-cards');

    // Initialize Leaflet map for homepage
    function initializeHomepageMap() {
      if (homepageMap) return; // Already initialized

      // Initialize the map centered on South Florida with scroll wheel zoom disabled
      homepageMap = L.map('homepage-properties-map', {
        scrollWheelZoom: false,
        doubleClickZoom: true,
        dragging: true,
        zoomControl: true
      }).setView([26.5, -80.2], 9);

      // Add tile layer (OpenStreetMap)
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors',
        maxZoom: 18
      }).addTo(homepageMap);

      // Create layer group for markers
      homepageMarkersLayer = L.layerGroup().addTo(homepageMap);
    }

    // Geocode properties using Nominatim (free, no API key required)
    async function geocodeProperty(property) {
      try {
        const address = property.fullAddress;
        if (!address || address.trim() === '') return property;

        console.log('Geocoding address:', address);

        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&limit=1&q=${encodeURIComponent(address)}`);
        const data = await response.json();

        if (data && data.length > 0) {
          const result = data[0];
          console.log('Geocoded successfully:', address, 'to', result.lat, result.lon);
          return {
            ...property,
            lat: parseFloat(result.lat),
            lng: parseFloat(result.lon),
            needsGeocoding: false
          };
        } else {
          console.log('No geocoding results for:', address);
          return property;
        }
      } catch (error) {
        console.error('Geocoding error for', property.fullAddress, ':', error);
        return property;
      }
    }

    // Geocode all properties that need it
    async function geocodeProperties(properties) {
      const geocodedProperties = [];

      for (const property of properties) {
        if (property.needsGeocoding) {
          const geocoded = await geocodeProperty(property);
          geocodedProperties.push(geocoded);
          // Add delay to respect Nominatim rate limits
          await new Promise(resolve => setTimeout(resolve, 100));
        } else {
          geocodedProperties.push(property);
        }
      }

      return geocodedProperties;
    }

    // Render properties on the homepage Leaflet map
    async function renderHomepageMapView(properties) {
      if (!homepagePropertiesMap) return;

      // Initialize map if not already done
      initializeHomepageMap();

      // Clear existing markers
      if (homepageMarkersLayer) {
        homepageMarkersLayer.clearLayers();
      }

      if (properties.length === 0) return;

      // Geocode properties that need it
      const geocodedProperties = await geocodeProperties(properties);

      // Create custom icon for properties
      const propertyIcon = L.divIcon({
        className: 'custom-property-marker',
        html: `
          <div class="w-8 h-8 bg-sba-navy rounded-full border-2 border-white shadow-lg flex items-center justify-center hover:scale-110 transition-transform duration-200">
            <div class="w-3 h-3 bg-white rounded-full"></div>
          </div>
        `,
        iconSize: [32, 32],
        iconAnchor: [16, 16]
      });

      // Add markers for each property
      const markers = [];
      geocodedProperties.forEach(property => {
        const marker = L.marker([property.lat, property.lng], { icon: propertyIcon })
          .bindTooltip(`
            <div class="text-sm">
              <div class="font-semibold text-gray-900">${property.title}</div>
              <div class="text-gray-600">${property.location}</div>
              <div class="text-gray-500">${property.size} • ${property.type}</div>
              <div class="font-semibold text-sba-navy">${property.price} SF/Year</div>
            </div>
          `, {
            permanent: false,
            direction: 'top',
            offset: [0, -20]
          })
          .on('click', function() {
            showHomepagePropertyCard(property);
          });

        markers.push(marker);
        homepageMarkersLayer.addLayer(marker);
      });

      // Fit map bounds to show all properties
      if (markers.length > 0) {
        const group = new L.featureGroup(markers);
        homepageMap.fitBounds(group.getBounds().pad(0.1));
      }
    }

    // Show property card in homepage map view (GTA-style popup)
    function showHomepagePropertyCard(property) {
      if (!homepageMapPropertyCards) return;

      const cardHTML = `
        <div class="bg-white m-4 rounded-xl border border-gray-200 shadow-lg p-6 transform transition-all duration-300 hover:shadow-xl">
          <div class="flex items-start space-x-6">
            <img
              src="${property.image}"
              alt="${property.title}"
              class="w-32 h-32 rounded-xl object-cover flex-shrink-0 shadow-md"
            />
            <div class="flex-1 min-w-0">
              <div class="flex items-start justify-between mb-3">
                <div>
                  <h3 class="font-bold text-gray-900 text-lg mb-1">${property.title}</h3>
                  <p class="text-gray-600 text-sm flex items-center">
                    <svg class="w-4 h-4 mr-1 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                    </svg>
                    ${property.location}
                  </p>
                </div>
                <div class="text-right">
                  <div class="text-2xl font-bold text-sba-navy">${property.price}</div>
                  <div class="text-sm text-gray-500">/SF per month</div>
                </div>
              </div>

              <div class="grid grid-cols-2 gap-4 mb-4">
                <div class="bg-gray-50 rounded-lg p-3">
                  <div class="text-xs text-gray-500 mb-1">Size</div>
                  <div class="font-semibold text-gray-900">${property.size}</div>
                </div>
                <div class="bg-gray-50 rounded-lg p-3">
                  <div class="text-xs text-gray-500 mb-1">Type</div>
                  <div class="font-semibold text-gray-900">${property.type}</div>
                </div>
              </div>

              <div class="flex items-center justify-between">
                <div class="flex items-center space-x-2">
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                    ${property.available ? 'Available Now' : 'Contact for Availability'}
                  </span>
                </div>
                <a
                  href="/property/${property.id}"
                  class="inline-flex items-center px-4 py-2 bg-sba-navy text-white font-semibold rounded-lg hover:bg-sba-navy-dark transition-all duration-200 shadow-sm hover:shadow-md"
                >
                  View Full Details
                  <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
                  </svg>
                </a>
              </div>
            </div>
          </div>
        </div>
      `;

      homepageMapPropertyCards.innerHTML = cardHTML;
    }

    // Initialize homepage with all properties showing on map
    const getAllProperties = () => {
      return Object.values(warehouseData).flat();
    };

    // Initialize the page with all properties on the map
    const allProperties = getAllProperties();
    // Initial load with async geocoding
    setTimeout(() => {
      renderHomepageMapView(allProperties);
    }, 500); // Give a bit more time for initial load

  });
</script>