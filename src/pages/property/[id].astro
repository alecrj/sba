---
// @ts-nocheck
// Dynamic Property Detail Page
import BaseLayout from '../../layouts/BaseLayout.astro';
import Navigation from '../../components/Navigation.astro';
import Footer from '../../components/Footer.astro';
import CalendarBooking from '../../components/CalendarBooking.astro';

export async function getStaticPaths() {
  // Fetch properties from CRM API for build-time path generation
  let allWarehouses: any[] = [];

  try {
    const crmApiUrl = 'https://sbaycrm.netlify.app';
    const response = await fetch(`${crmApiUrl}/api/public/properties`, {
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    });

    if (response.ok) {
      const result = await response.json();
      const properties = result.properties || [];

      // Transform CRM properties to website format
      allWarehouses = properties.map((property, index) => {
        const sizeValue = parseInt(property.size?.toString().replace(/[^\d]/g, '')) || 0;
        const displaySize = sizeValue > 0 ? `${sizeValue.toLocaleString()} SF` : property.size || 'N/A';

        const typeMapping = {
          'warehouse': 'warehouse',
          'distribution': 'distribution',
          'manufacturing': 'manufacturing',
          'industrial': 'manufacturing',
          'flex': 'flex',
          'office': 'flex'
        };
        const typeValue = typeMapping[property.type?.toLowerCase()] || 'warehouse';

        // Format price - clean up any existing formatting and just use the number
        const priceNumber = property.price.toString().replace(/[^\d.]/g, '');
        const formattedPrice = `$${priceNumber}`;

        return {
          id: property.id,
          title: property.title,
          location: property.location,
          size: displaySize,
          sizeValue: sizeValue,
          price: formattedPrice,
          type: property.type,
          typeValue: typeValue,
          image: property.image || "https://images.unsplash.com/photo-1586528116311-ad8dd3c8310d?w=800&h=600&fit=crop",
          photos: property.gallery?.length > 0 ? property.gallery : [property.image || "https://images.unsplash.com/photo-1586528116311-ad8dd3c8310d?w=800&h=600&fit=crop"],
          available: property.available,
          county: property.county || "Miami-Dade",
          description: property.description,
          features: property.features || [],
          address: `${property.street_address || ''}, ${property.city || ''}, ${property.state || 'FL'} ${property.zip_code || ''}`.trim()
        };
      });
    }
  } catch (error) {
    console.log('Error fetching properties from CRM for static paths:', error);
  }
  return allWarehouses.map((warehouse) => ({
    params: { id: warehouse.id.toString() },
    props: { warehouse },
  }));
}

const { warehouse } = Astro.props;

// Fetch warehouse data from CRM API for related properties
let warehousesByCounty: any = {};

try {
  const crmApiUrl = 'https://sbaycrm.netlify.app';
  const response = await fetch(`${crmApiUrl}/api/public/properties`, {
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    }
  });

  if (response.ok) {
    const result = await response.json();
    const properties = result.properties || [];

    // Transform CRM properties to website format
    const transformedProperties = properties.map((property, index) => {
      const sizeValue = parseInt(property.size?.toString().replace(/[^\d]/g, '')) || 0;
      const displaySize = sizeValue > 0 ? `${sizeValue.toLocaleString()} SF` : property.size || 'N/A';

      const typeMapping = {
        'warehouse': 'warehouse',
        'distribution': 'distribution',
        'manufacturing': 'manufacturing',
        'industrial': 'manufacturing',
        'flex': 'flex',
        'office': 'flex'
      };
      const typeValue = typeMapping[property.type?.toLowerCase()] || 'warehouse';

      // Format price - clean up any existing formatting and just use the number
      const priceNumber = property.price.toString().replace(/[^\d.]/g, '');
      const formattedPrice = `$${priceNumber}`;

      return {
        id: property.id,
        title: property.title,
        location: property.location,
        size: displaySize,
        sizeValue: sizeValue,
        price: formattedPrice,
        type: property.type,
        typeValue: typeValue,
        image: property.image || "https://images.unsplash.com/photo-1586528116311-ad8dd3c8310d?w=800&h=600&fit=crop",
        photos: property.gallery?.length > 0 ? property.gallery : [property.image || "https://images.unsplash.com/photo-1586528116311-ad8dd3c8310d?w=800&h=600&fit=crop"],
        available: property.available,
        county: property.county || "Miami-Dade",
        description: property.description,
        features: property.features || [],
        address: `${property.street_address || ''}, ${property.city || ''}, ${property.state || 'FL'} ${property.zip_code || ''}`.trim()
      };
    });

    // Group properties by county
    warehousesByCounty = transformedProperties.reduce((acc, property) => {
      const county = property.county;
      if (!acc[county]) {
        acc[county] = [];
      }
      acc[county].push(property);
      return acc;
    }, {});
  }
} catch (error) {
  console.log('Error fetching properties from CRM for related properties:', error);
}

// Related properties (same county, different property)
const allWarehouses = Object.values(warehousesByCounty).flat();
const relatedProperties = allWarehouses
  .filter(w => w.county === warehouse.county && w.id !== warehouse.id)
  .slice(0, 3);
---

<BaseLayout
  title={`${warehouse.title} | Warehouse for Lease | Shallow Bay Advisors`}
  description={`${warehouse.description} - ${warehouse.sizeValue?.toLocaleString()} SF warehouse in ${warehouse.location}. ${warehouse.price} per SF. Available for immediate lease.`}
  image={warehouse.image}
>
  <Navigation />

  <main class="pt-20">
    <!-- Breadcrumb -->
    <div class="bg-white border-b border-gray-200">
      <div class="max-w-7xl mx-auto px-6 py-4">
        <nav class="text-sm">
          <a href="/" class="text-gray-600 hover:text-sba-navy">Find</a>
          <span class="mx-2 text-gray-400">></span>
          <span class="text-sba-navy font-medium">{warehouse.title}</span>
        </nav>
      </div>
    </div>

    <!-- Property Title Section -->
    <section class="bg-white border-b border-gray-200">
      <div class="max-w-7xl mx-auto px-6 py-6">
        <div class="flex flex-col md:flex-row md:items-center md:justify-between">
          <div>
            <h1 class="text-3xl font-semibold text-gray-900 mb-2">{warehouse.title}</h1>
            <div class="flex items-center text-gray-600 mb-2 md:mb-0">
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
              </svg>
              {warehouse.address}
            </div>
          </div>
          <div class="flex items-center gap-4">
            <div class="text-right">
              <div class="text-2xl font-bold text-gray-900">{warehouse.price}<span class="text-lg font-normal"> SF/Year</span></div>
              <div class="text-sm text-gray-600">{warehouse.size} â€¢ {warehouse.type}</div>
            </div>
            <div class={`px-3 py-1 rounded-full text-sm font-medium ${warehouse.available ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
              {warehouse.available ? 'Available' : 'Leased'}
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Airbnb-Style Main Section -->
    <section class="bg-white">
      <div class="max-w-7xl mx-auto px-6 py-8">

        <!-- Two Column Layout -->
        <div class="lg:grid lg:grid-cols-12 lg:gap-8">

          <!-- Left Column: Photo Gallery (60%) -->
          <div class="lg:col-span-7">
            <!-- Consistent Photo Gallery Layout -->
            <!-- Main Large Image -->
            <div class="relative aspect-[4/3] rounded-xl overflow-hidden mb-4">
              <img
                id="main-property-image"
                src={warehouse.image}
                alt={warehouse.title}
                class="w-full h-full object-cover transition-all duration-500"
              />
              <button class="absolute bottom-4 right-4 bg-white text-gray-900 px-4 py-2 rounded-lg font-medium hover:bg-gray-50 shadow-lg">
                <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 002 2z"/>
                </svg>
                Show all photos
              </button>
            </div>

            <!-- Horizontal Gallery Under Main Image -->
            <div class="flex gap-3 overflow-x-auto scrollbar-hide pb-4 mb-8" style="scroll-snap-type: x mandatory;">
              {(warehouse.photos || [warehouse.image]).map((photo, index) => (
                <div class="flex-none w-24 aspect-[4/3] rounded-lg overflow-hidden border-2 transition-all duration-300 gallery-thumbnail" style="scroll-snap-align: start;" data-src={photo}>
                  <img
                    src={photo}
                    alt={`${warehouse.title} - Photo ${index + 1}`}
                    class="w-full h-full object-cover hover:opacity-80 transition-opacity cursor-pointer"
                  />
                </div>
              ))}
            </div>

            <!-- Property Details Cards Below Photos -->
            <div class="mt-8">
              <h2 class="text-xl font-semibold text-gray-900 mb-6">Property Details</h2>

              <!-- Key Details Grid -->
              <div class="grid grid-cols-2 md:grid-cols-3 gap-4 mb-6">
                <div class="bg-white rounded-lg border border-gray-200 p-4 text-center">
                  <div class="text-sm text-gray-600 mb-1">Total Square Footage</div>
                  <div class="text-lg font-semibold text-gray-900">{warehouse.size}</div>
                </div>
                <div class="bg-white rounded-lg border border-gray-200 p-4 text-center">
                  <div class="text-sm text-gray-600 mb-1">Property Type</div>
                  <div class="text-lg font-semibold text-gray-900">{warehouse.type}</div>
                </div>
                <div class="bg-white rounded-lg border border-gray-200 p-4 text-center">
                  <div class="text-sm text-gray-600 mb-1">Lease Rate</div>
                  <div class="text-lg font-semibold text-gray-900">{warehouse.price} SF/Year</div>
                </div>
                <div class="bg-white rounded-lg border border-gray-200 p-4 text-center">
                  <div class="text-sm text-gray-600 mb-1">County</div>
                  <div class="text-lg font-semibold text-gray-900">{warehouse.county}</div>
                </div>
                <div class="bg-white rounded-lg border border-gray-200 p-4 text-center">
                  <div class="text-sm text-gray-600 mb-1">Location</div>
                  <div class="text-lg font-semibold text-gray-900">{warehouse.location}</div>
                </div>
                <div class="bg-white rounded-lg border border-gray-200 p-4 text-center">
                  <div class="text-sm text-gray-600 mb-1">Availability</div>
                  <div class="text-lg font-semibold text-green-600">
                    {warehouse.available ? 'Available Now' : 'Coming Soon'}
                  </div>
                </div>
              </div>

              <!-- Property Features -->
              <div class="bg-white rounded-lg border border-gray-200 p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">Key Features</h3>
                <!-- Adaptive Grid Container - Fixed Height -->
                <div class="h-32">
                  <div class={`grid gap-3 h-full ${
                    warehouse.features.length === 1 ? 'grid-cols-1 place-items-center' :
                    warehouse.features.length === 2 ? 'grid-cols-2' :
                    warehouse.features.length === 3 ? 'grid-cols-3' :
                    warehouse.features.length === 4 ? 'grid-cols-2 grid-rows-2' :
                    warehouse.features.length === 5 ? 'grid-cols-3 grid-rows-2' :
                    'grid-cols-3 grid-rows-2'
                  }`}>
                    {warehouse.features.map((feature, index) => (
                      <div class={`bg-gradient-to-br from-sba-navy to-sba-navy-dark text-white rounded-xl flex items-center justify-center text-center p-4 shadow-lg hover:shadow-xl hover:scale-105 transition-all duration-300 transform ${
                        warehouse.features.length === 5 && index === 4 ? 'col-start-2' : ''
                      }`}>
                        <span class="font-semibold text-base leading-tight">{feature}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Right Column: Property Info + Booking (40%) -->
          <div class="lg:col-span-5 mt-8 lg:mt-0">
            <div class="lg:sticky lg:top-24">

              <!-- Booking Form -->
              <div class="border border-gray-200 rounded-xl p-6 bg-gray-50">
                <CalendarBooking
                  title="Schedule a Tour"
                  subtitle="Book a consultation with our team"
                  buttonText="Schedule Property Tour"
                  propertyId={warehouse.id.toString()}
                  propertyTitle={warehouse.title}
                />
              </div>

              <!-- Contact Info -->
              <div class="mt-6 p-6 bg-gradient-to-br from-sba-navy to-sba-navy-dark rounded-xl text-center shadow-lg">
                <div class="flex items-center justify-center mb-3">
                  <svg class="w-5 h-5 text-white mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21L6.16 11.37a11.045 11.045 0 006.516 6.516l1.983-4.064a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                  </svg>
                  <p class="text-white font-medium">Need immediate assistance?</p>
                </div>
                <a href="tel:954-937-9667" class="inline-block bg-white text-sba-navy font-bold text-lg px-6 py-3 rounded-lg hover:bg-gray-50 hover:scale-105 transition-all duration-300 shadow-md">
                  (954) 937-9667
                </a>
                <p class="text-white/80 text-sm mt-3">Available Mon-Fri, 9AM-6PM EST</p>
              </div>

            </div>
          </div>

        </div>
      </div>
    </section>


    <!-- Google Maps Location Section -->
    <section class="py-16 bg-white">
      <div class="max-w-7xl mx-auto px-6">
        <h2 class="text-2xl font-bold text-gray-900 mb-8 text-center">Property Location</h2>

        <div class="grid lg:grid-cols-3 gap-8">
          <!-- Location Details -->
          <div class="lg:col-span-1">
            <div class="bg-gray-50 rounded-xl p-6">
              <h3 class="text-lg font-semibold text-gray-900 mb-4">Address</h3>
              <p class="text-gray-700 mb-4">{warehouse.address}</p>

              <div class="space-y-3">
                <div class="flex items-center">
                  <svg class="w-5 h-5 text-gray-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                  </svg>
                  <span class="text-gray-700">{warehouse.location}</span>
                </div>
                <div class="flex items-center">
                  <svg class="w-5 h-5 text-gray-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-1.447-.894L15 4m0 13V4m-6 3a1 1 0 102 0v10a1 1 0 11-2 0V7z"/>
                  </svg>
                  <span class="text-gray-700">{warehouse.county} County</span>
                </div>
              </div>

              <div class="mt-6 pt-6 border-t border-gray-200">
                <a
                  href={`https://maps.google.com/maps?q=${encodeURIComponent(warehouse.address)}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="inline-flex items-center text-sba-navy hover:text-sba-navy-dark font-medium"
                >
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
                  </svg>
                  Open in Google Maps
                </a>
              </div>
            </div>
          </div>

          <!-- Google Maps Embed -->
          <div class="lg:col-span-2">
            <div class="w-full h-96 rounded-xl overflow-hidden border border-gray-200">
              <iframe
                width="100%"
                height="100%"
                frameborder="0"
                style="border:0"
                src={`https://www.google.com/maps/embed/v1/place?key=AIzaSyBGHNGaThd-Qhp-kRGdNL1V4HZDRJaQr5M&q=${encodeURIComponent(warehouse.address)}&maptype=roadmap&zoom=15`}
                allowfullscreen>
              </iframe>
            </div>
          </div>
        </div>
      </div>
    </section>

    <!-- Property Description -->
    <section class="py-16 bg-gray-50">
      <div class="max-w-7xl mx-auto px-6">
        <div class="max-w-4xl mx-auto">
          <h2 class="text-2xl font-bold text-gray-900 mb-6">About This Property</h2>
          <p class="text-lg text-gray-700 leading-relaxed">{warehouse.description}</p>
        </div>
      </div>
    </section>

    <!-- Related Properties -->
    {relatedProperties.length > 0 && (
      <section class="py-16 bg-white">
        <div class="max-w-7xl mx-auto px-6">
          <h2 class="text-2xl font-bold text-gray-900 mb-8">Other Properties in {warehouse.county}</h2>

          <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {relatedProperties.map((property) => (
              <a href={`/property/${property.id}`} class="group">
                <div class="bg-white rounded-xl overflow-hidden border border-gray-200 hover:shadow-lg transition-shadow">
                  <div class="aspect-[4/3] overflow-hidden">
                    <img
                      src={property.image}
                      alt={property.title}
                      class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                    />
                  </div>
                  <div class="p-6">
                    <h3 class="font-semibold text-gray-900 mb-2">{property.title}</h3>
                    <p class="text-gray-600 mb-3">{property.location}</p>
                    <div class="flex justify-between items-center">
                      <span class="text-sm text-gray-500">{property.size} â€¢ {property.type}</span>
                      <span class="font-semibold text-sba-navy">{property.price} SF/Year</span>
                    </div>
                  </div>
                </div>
              </a>
            ))}
          </div>
        </div>
      </section>
    )}

  </main>

  <Footer />
</BaseLayout>

<style>
  /* Gallery thumbnail styles */
  .gallery-thumbnail {
    border-color: transparent;
  }

  .gallery-thumbnail:hover {
    border-color: #e5e7eb;
    transform: scale(1.05);
  }

  .gallery-thumbnail.active {
    border-color: #3b82f6;
    box-shadow: 0 0 0 1px #3b82f6;
  }

  /* Smooth scrolling for gallery */
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const mainImage = document.getElementById('main-property-image');
    const thumbnails = document.querySelectorAll('.gallery-thumbnail');

    if (!mainImage || !thumbnails.length) return;

    // Set initial active state on first thumbnail
    if (thumbnails[0]) {
      thumbnails[0].classList.add('active');
    }

    // Add click handlers to thumbnails
    thumbnails.forEach((thumbnail, index) => {
      thumbnail.addEventListener('click', function() {
        // Remove active class from all thumbnails
        thumbnails.forEach(t => t.classList.remove('active'));

        // Add active class to clicked thumbnail
        this.classList.add('active');

        // Get the image source from data attribute
        const newImageSrc = this.dataset.src;

        if (newImageSrc && mainImage) {
          // Add fade effect
          mainImage.style.opacity = '0.5';

          // Change the image source after short delay for smooth transition
          setTimeout(() => {
            mainImage.src = newImageSrc;
            mainImage.style.opacity = '1';
          }, 150);
        }
      });
    });
  });
</script>